{"version":3,"sources":["serviceWorker.js","model/action/AppAction.js","model/action/HumitureAction.js","model/reducer/HumitureReducer.js","model/reducer/AppReducer.js","model/reducer/index.js","model/store/store.js","app/component/HumitureComponent.jsx","app/container/Humiture.js","app/component/CarComponent.jsx","app/container/Car.js","app/component/AppComponent.jsx","app/container/App.js","index.js"],"names":["Boolean","window","location","hostname","match","setSocket","socket","type","setHumiture","humiture","HumitureReducer","state","arguments","length","undefined","action","Object","objectSpread","AppReducer","combineReducers","appReducer","humitureReducer","store","createStore","reducer","HumitureComponent","nextProps","console","log","this","setState","searchData","react_default","a","createElement","JSON","stringify","props","Component","Humiture","connect","CarComponent","moveCar","direction","message","car","_this","emit","className","onClick","bind","Car","AppComponent","_this$props","require","on","data","parse","container_Humiture","container_Car","App","dispatch","ReactDOM","render","es","container_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,qFChBOC,EAAY,SAACC,GAAD,MAAa,CACpCC,KAHwB,aAIxBD,WCFWE,EAAc,SAACC,GAAD,MAAe,CACxCF,KAH0B,eAI1BE,aCUaC,EAZS,WAAwB,IAAvBC,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC9C,OAAQC,EAAOR,MACb,IDJwB,eCIxB,IACSE,EAAYM,EAAZN,SACP,MAAO,CACLA,SAASO,OAAAC,EAAA,EAAAD,CAAA,GAAKP,IAElB,QACE,OAAOE,ICIEO,EAZI,WAAwB,IAAvBP,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACzC,OAAQC,EAAOR,MACb,IHJsB,aGMpB,MAAO,CACLD,OAFeS,EAAVT,QAIT,QACE,OAAOK,ICNEQ,cAAgB,CAC7BC,WAAYF,EACZG,gBAAiBX,ICMJY,EAFDC,YAAYC,EAPR,CAChBJ,WAAY,GACZC,gBAAiB,CACfZ,SAAU,2CCSCgB,2MAZaC,GACxBC,QAAQC,MACRC,KAAKC,SAAS,CAACC,WAAYL,EAAUK,8CAIrC,OACEC,EAAAC,EAAAC,cAAA,WAAMC,KAAKC,UAAUP,KAAKQ,eARAC,cCKhC,IAEeC,EAFEC,YAJjB,SAAyB7B,GACvB,OAAOA,EAAMU,iBAGEmB,CAAyBf,GCgB3BgB,6MApBbC,QAAU,SAACC,GAAc,IAEjBC,EAAU,CACdC,IAAK,CACHF,UAAWA,IAHEG,EAAKT,MAAf/B,OAMAyC,KAAK,MAAOZ,KAAKC,UAAUQ,6EAIlC,OACEZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQc,UAAU,kBAAkBC,QAASpB,KAAKa,QAAQQ,KAAKrB,KAAM,MAArE,WACAG,EAAAC,EAAAC,cAAA,UAAQc,UAAU,kBAAkBC,QAASpB,KAAKa,QAAQQ,KAAKrB,KAAM,MAArE,gBAfmBS,aCK3B,IAEea,EAFHX,YAJZ,SAAyB7B,GACvB,OAAOA,EAAMS,YAGHoB,CAAyBC,GCoBtBW,8LApBO,IAAAC,EACexB,KAAKQ,MAA/BhC,EADWgD,EACXhD,UAAWG,EADA6C,EACA7C,YACZF,EAASgD,EAAQ,GAARA,CAA4B,SAC3ChD,EAAOiD,GAAG,KAAM,SAACC,GACf,IAAM/C,EAAW0B,KAAKsB,MAAMD,GAC5BhD,EAAYC,KAEdJ,EAAUC,oCAIV,OACE0B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwB,EAAD,MACA1B,EAAAC,EAAAC,cAACyB,EAAD,cAhBmBrB,aCU3B,IAEesB,EAFHpB,YAXZ,SAAyB7B,GACvB,OAAOA,GAGT,SAA4BkD,GAC1B,MAAO,CACLxD,UAAW,SAACC,GAAD,OAAYuD,EAASxD,EAAUC,KAC1CE,YAAa,SAACC,GAAD,OAAcoD,EAASrD,EAAYC,OAIxC+B,CAA6CY,GCLzDU,IAASC,OACP/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAU1C,MAAOA,GACfU,EAAAC,EAAAC,cAAC+B,EAAD,OAEAC,SAASC,eAAe,SbmHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0b07f8ab.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const SET_SOCKET = 'SET_SOCKET';\r\n\r\nexport const setSocket = (socket) => ({\r\n  type: SET_SOCKET,\r\n  socket\r\n});","export const SET_HUMITURE = 'SET_HUMITURE';\r\n\r\nexport const setHumiture = (humiture) => ({\r\n  type: SET_HUMITURE,\r\n  humiture\r\n});","import {SET_HUMITURE} from './../action';\r\n\r\nconst HumitureReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case SET_HUMITURE:\r\n      const {humiture} = action;\r\n      return {\r\n        humiture: {...humiture}\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default HumitureReducer;","import {SET_SOCKET} from './../action';\r\n\r\nconst AppReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case SET_SOCKET:\r\n      const {socket} = action;\r\n      return {\r\n        socket\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default AppReducer;","import {combineReducers} from 'redux';\r\nimport HumitureReducer from './HumitureReducer';\r\nimport AppReducer from './AppReducer';\r\n\r\nexport default combineReducers({\r\n  appReducer: AppReducer,\r\n  humitureReducer: HumitureReducer\r\n});","import {createStore} from 'redux';\r\nimport reducer from './../reducer';\r\n\r\nconst initValue = {\r\n  appReducer: {},\r\n  humitureReducer: {\r\n    humiture: {}\r\n  }\r\n};\r\n\r\nconst store = createStore(reducer, initValue);\r\n\r\nexport default store;","import React, {Component} from 'react';\r\n\r\nclass HumitureComponent extends Component {\r\n  componentWillReceiveProps(nextProps) {\r\n    console.log();\r\n    this.setState({searchData: nextProps.searchData})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>{JSON.stringify(this.props)}</div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default HumitureComponent;","import {connect} from 'react-redux';\r\nimport HumitureComponent from '../component/HumitureComponent';\r\n\r\nfunction mapStateToProps(state) {\r\n  return state.humitureReducer;\r\n}\r\n\r\nconst Humiture = connect(mapStateToProps)(HumitureComponent);\r\n\r\nexport default Humiture;","import React, {Component} from 'react';\r\n\r\nclass CarComponent extends Component {\r\n  moveCar = (direction) => {\r\n    const {socket} = this.props;\r\n    const message = {\r\n      car: {\r\n        direction: direction\r\n      }\r\n    };\r\n    socket.emit('car', JSON.stringify(message));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button className=\"btn btn-success\" onClick={this.moveCar.bind(this, 'F')}>Forward</button>\r\n        <button className=\"btn btn-success\" onClick={this.moveCar.bind(this, 'S')}>Stop</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CarComponent;","import {connect} from 'react-redux';\r\nimport CarComponent from './../component/CarComponent';\r\n\r\nfunction mapStateToProps(state) {\r\n  return state.appReducer;\r\n}\r\n\r\nconst Car = connect(mapStateToProps)(CarComponent);\r\n\r\nexport default Car;","import React, {Component} from 'react';\nimport './App.css';\nimport Humiture from './../container/Humiture';\nimport Car from './../container/Car';\n\nclass AppComponent extends Component {\n\n  componentDidMount() {\n    const {setSocket, setHumiture} = this.props;\n    const socket = require('socket.io-client')(':8990');\n    socket.on('ht', (data) => {\n      const humiture = JSON.parse(data);\n      setHumiture(humiture);\n    });\n    setSocket(socket);\n  }\n\n  render() {\n    return (\n      <div>\n        <Humiture/>\n        <Car/>\n      </div>\n    )\n  }\n}\n\nexport default AppComponent;\n","import {connect} from 'react-redux';\r\nimport {setSocket, setHumiture} from '../../model/action';\r\nimport AppComponent from './../component/AppComponent';\r\n\r\nfunction mapStateToProps(state) {\r\n  return state;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setSocket: (socket) => dispatch(setSocket(socket)),\r\n    setHumiture: (humiture) => dispatch(setHumiture(humiture))\r\n  };\r\n}\r\n\r\nconst App = connect(mapStateToProps, mapDispatchToProps)(AppComponent);\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './model/store/store';\nimport App from './app/container/App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}